version: "2.0"

endpoints:
  metal_endpoint:
    kind: ip

services:
  metal-blockchain:
    image: ubuntu:22.04
    command:
      - /bin/bash
      - -c
      - |
        echo 'Installing MetalGo on Ubuntu for MAINNET...'
        apt-get update -o Acquire::http::Pipeline-Depth=0
        apt-get install -y --no-install-recommends wget curl jq ca-certificates
        
        echo 'Downloading MetalGo v1.12.0-hotfix...'
        wget --no-check-certificate -O metalgo.tar.gz \
          https://github.com/MetalBlockchain/metalgo/releases/download/v1.12.0-hotfix/metalgo-linux-amd64-v1.12.0-hotfix.tar.gz
        
        echo 'Extracting MetalGo...'
        tar -xzf metalgo.tar.gz
        mv metalgo-v1.12.0-hotfix/metalgo /usr/local/bin/
        chmod +x /usr/local/bin/metalgo
        rm -rf metalgo-v1.12.0-hotfix metalgo.tar.gz
        
        echo 'Creating data directory...'
        mkdir -p /root/.metalgo
        
        echo 'Setting file descriptor limits...'
        ulimit -n 65536
        echo "File descriptor limit set to: $(ulimit -n)"
        
        echo '========================================='
        echo 'Starting MetalGo node on MAINNET'
        echo 'Using automatic public IP resolution'
        echo '========================================='
        
        # Get public IP from external service
        echo 'Detecting public IP address...'
        PUBLIC_IP=$(curl -4 -s --max-time 10 https://api.ipify.org)
        if [ -z "$PUBLIC_IP" ]; then
          PUBLIC_IP=$(curl -4 -s --max-time 10 https://ifconfig.me)
        fi
        if [ -z "$PUBLIC_IP" ]; then
          PUBLIC_IP=$(curl -4 -s --max-time 10 https://icanhazip.com)
        fi
        
        echo "Detected public IP: $PUBLIC_IP"
        
        # Start MetalGo with detected public IP (let it use default mainnet bootstrap)
        /usr/local/bin/metalgo \
          --network-id=mainnet \
          --public-ip=$PUBLIC_IP \
          --http-host=0.0.0.0 \
          --http-port=9650 \
          --staking-port=9651 \
          --log-level=info &
        
        METAL_PID=$!
        
        echo 'Waiting for MetalGo to initialize (30 seconds)...'
        sleep 30
        
        echo 'Waiting for API to be ready...'
        for i in {1..20}; do
          if curl -s --max-time 5 http://localhost:9650/ext/health > /dev/null 2>&1; then
            echo 'API is ready!'
            break
          fi
          echo "Waiting for API... attempt $i/20"
          sleep 15
        done
        
        echo 'Waiting for blockchain to bootstrap...'
        while true; do
          RESPONSE=$(curl -s --max-time 10 -X POST \
            -H 'Content-Type: application/json' \
            -d '{"jsonrpc":"2.0","method":"info.isBootstrapped","params":{"chain":"X"},"id":1}' \
            http://localhost:9650/ext/info 2>/dev/null)
          
          if echo "$RESPONSE" | jq -e '.result.isBootstrapped == true' > /dev/null 2>&1; then
            echo 'Bootstrap complete!'
            break
          fi
          echo 'Still bootstrapping... (this can take several minutes)'
          sleep 30
        done
        
        # Wait a bit more for P2P connections to establish
        echo 'Waiting for P2P connections to establish...'
        sleep 15
        
        # Get node information
        echo 'Retrieving node information...'
        NODE_INFO=$(curl -s -X POST -H 'Content-Type: application/json' \
          -d '{"jsonrpc":"2.0","method":"info.getNodeID","params":{},"id":1}' \
          http://localhost:9650/ext/info 2>/dev/null)
        
        NODE_ID=$(echo "$NODE_INFO" | jq -r '.result.nodeID // "N/A"' 2>/dev/null)
        BLS_KEY=$(echo "$NODE_INFO" | jq -r '.result.nodePOP.publicKey // "N/A"' 2>/dev/null)
        BLS_SIG=$(echo "$NODE_INFO" | jq -r '.result.nodePOP.proofOfPossession // "N/A"' 2>/dev/null)
        
        # Get peer information
        PEERS_INFO=$(curl -s -X POST -H 'Content-Type: application/json' \
          -d '{"jsonrpc":"2.0","method":"info.peers","params":{},"id":1}' \
          http://localhost:9650/ext/info 2>/dev/null)
        
        PEER_COUNT=$(echo "$PEERS_INFO" | jq -r '.result.numPeers // 0' 2>/dev/null)
        if [ -z "$PEER_COUNT" ] || [ "$PEER_COUNT" = "null" ]; then
          PEER_COUNT=0
        fi
        
        # Get advertised IP
        ADVERTISED_IP="$PUBLIC_IP"
        
        echo ""
        echo "========================================"
        echo "=== METAL MAINNET VALIDATOR SETUP DATA ==="
        echo "========================================"
        echo ""
        echo "Copy the following data to your Metal MAINNET dashboard:"
        echo ""
        echo "Node ID:"
        echo "$NODE_ID"
        echo ""
        echo "BLS Public Key:"
        echo "$BLS_KEY"
        echo ""
        echo "BLS Signature (Proof of Possession):"
        echo "$BLS_SIG"
        echo ""
        echo "========================================"
        echo "=== NETWORK STATUS ==="
        echo "========================================"
        echo ""
        echo "Public IP: $ADVERTISED_IP"
        echo "Connected Peers: $PEER_COUNT"
        echo "Network: Metal Mainnet"
        echo "RPC Endpoint: http://<your-deployment-url>:9650"
        echo "P2P Port: 9651"
        echo ""
        echo "Explorer: https://metalscan.io/"
        echo "Search for your Node ID in the explorer to verify connectivity"
        echo ""
        echo "========================================"
        echo "=== MAINNET DEPLOYMENT COMPLETE ==="
        echo "========================================"
        echo ""
        
        if [ "$PEER_COUNT" -gt 0 ] 2>/dev/null; then
          echo "✅ SUCCESS: Node is connected to $PEER_COUNT peer(s)"
          echo "✅ Your node should appear as 'Connected' in the explorer"
        else
          echo "⚠️  WARNING: Node has 0 peers (may still be connecting)"
          echo "⚠️  Wait 5-10 minutes and check the explorer"
        fi
        
        echo ""
        echo "Keeping node running... (check logs for ongoing activity)"
        
        # Keep container running and show periodic status
        while true; do
          sleep 300  # Every 5 minutes
          CURRENT_PEERS=$(curl -s -X POST -H 'Content-Type: application/json' \
            -d '{"jsonrpc":"2.0","method":"info.peers","params":{},"id":1}' \
            http://localhost:9650/ext/info | jq -r '.result.numPeers // 0')
          echo "[$(date)] Status: Connected to $CURRENT_PEERS peer(s)"
        done
    
    expose:
      - port: 9650
        as: 9650
        to:
          - global: true
            ip: metal_endpoint
        proto: tcp
      - port: 9651  
        as: 9651
        to:
          - global: true
            ip: metal_endpoint
        proto: tcp

profiles:
  compute:
    metal-blockchain:
      resources:
        cpu:
          units: 2.0
        memory:
          size: 4Gi
        storage:
          - size: 120Gi

  placement:
    akash:
      pricing:
        metal-blockchain:
          denom: uakt
          amount: 2000

deployment:
  metal-blockchain:
    akash:
      profile: metal-blockchain
      count: 1
